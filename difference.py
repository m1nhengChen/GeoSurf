#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Compute and visualize pairwise differences between surface distance maps.

This utility:
1. Loads distance fields (point data arrays) from VTK/VTP meshes.
2. Computes pairwise difference fields (e.g., Heat − Euclid, Dijkstra − Euclid).
3. Saves the difference maps back into a new VTK/VTP file for visualization.
4. Plots histograms of the distance difference distributions.

Typical use case: comparing geodesic transforms computed via different algorithms.
"""

import vtk
import numpy as np
import matplotlib.pyplot as plt
from vtk.util.numpy_support import vtk_to_numpy, numpy_to_vtk


# -----------------------------------------------------------------------------
# Utility functions
# -----------------------------------------------------------------------------

def load_point_scalar_array(vtk_path: str, array_name: str):
    """
    Load a specified point-data scalar array from a .vtk or .vtp file.

    Parameters
    ----------
    vtk_path : str
        Path to the input VTK/VTP file.
    array_name : str
        Name of the point-data array to load.

    Returns
    -------
    np_arr : np.ndarray
        Numpy array of shape (n_points,) containing scalar values.
    poly : vtk.vtkPolyData
        The corresponding VTK PolyData object (for reuse when saving output).
    """
    ext = vtk_path.lower().split('.')[-1]
    if ext == "vtp":
        reader = vtk.vtkXMLPolyDataReader()
    elif ext == "vtk":
        reader = vtk.vtkPolyDataReader()
    else:
        raise RuntimeError(f"Unsupported file extension: {vtk_path}")

    reader.SetFileName(vtk_path)
    reader.Update()
    poly = reader.GetOutput()

    arr = poly.GetPointData().GetArray(array_name)
    if arr is None:
        raise RuntimeError(f"Array '{array_name}' not found in file: {vtk_path}")

    np_arr = vtk_to_numpy(arr)
    return np_arr, poly


def compute_difference_field(base_dist: np.ndarray, comp_dist: np.ndarray):
    """
    Compute a per-vertex difference field: (comp_dist − base_dist).

    Parameters
    ----------
    base_dist : np.ndarray
        Baseline scalar field (e.g., Euclidean distance).
    comp_dist : np.ndarray
        Comparison scalar field (e.g., Heat-based distance).

    Returns
    -------
    np.ndarray
        Difference field (same shape as inputs).
    """
    return comp_dist - base_dist


def add_difference_to_polydata(poly: vtk.vtkPolyData, diff: np.ndarray, diff_name: str):
    """
    Append a new difference field as a point-data array to a PolyData object.

    Parameters
    ----------
    poly : vtk.vtkPolyData
        PolyData object to modify.
    diff : np.ndarray
        Difference values (length must equal number of vertices).
    diff_name : str
        Name of the new array.
    """
    vtk_arr = numpy_to_vtk(diff, deep=True, array_type=vtk.VTK_DOUBLE)
    vtk_arr.SetName(diff_name)
    poly.GetPointData().AddArray(vtk_arr)
    # Optional: Set this as the active scalar array for visualization
    # poly.GetPointData().SetScalars(vtk_arr)


def save_polydata(poly: vtk.vtkPolyData, out_path: str):
    """
    Save a PolyData mesh to .vtk or .vtp format.

    Parameters
    ----------
    poly : vtk.vtkPolyData
        The mesh to write.
    out_path : str
        Output file path (.vtk or .vtp).
    """
    ext = out_path.lower().split('.')[-1]
    if ext == "vtp":
        writer = vtk.vtkXMLPolyDataWriter()
    elif ext == "vtk":
        writer = vtk.vtkPolyDataWriter()
    else:
        raise RuntimeError(f"Unsupported output format: {out_path}")

    writer.SetFileName(out_path)
    writer.SetInputData(poly)

    # Prefer binary output for compactness
    if hasattr(writer, "SetDataModeToBinary"):
        writer.SetDataModeToBinary()
    if hasattr(writer, "SetFileTypeToBinary"):
        writer.SetFileTypeToBinary()

    writer.Write()


def plot_histogram(diff: np.ndarray, title: str):
    """
    Plot a histogram of vertex-wise distance differences.

    Parameters
    ----------
    diff : np.ndarray
        Difference values per vertex.
    title : str
        Title for the plot.
    """
    plt.figure(figsize=(6, 4))
    plt.hist(diff, bins=200, color='tomato', alpha=0.8)
    plt.title(title)
    plt.xlabel("Distance Difference")
    plt.ylabel("Vertex Count")
    plt.tight_layout()
    plt.show()


# -----------------------------------------------------------------------------
# Main pipeline
# -----------------------------------------------------------------------------

def main():
    """
    Compare Heat / Dijkstra / Euclidean distance fields and visualize the results.

    This example assumes that you have three VTK files generated by GeoSurf:
      - heat.vtk     : output from --algo heat
      - base.vtk     : output from --algo dijkstra
      - euclid.vtk   : output from --algo euclid

    It computes:
      - Heat − Euclid
      - Dijkstra − Euclid
    Then it saves them into a new file `surface_diff.vtp` and shows histograms.
    """
    # --- File paths and field name (modify as needed)
    heat_vtk = "heat.vtk"
    dijkstra_vtk = "base.vtk"
    euclid_vtk = "euclid.vtk"
    array_name = "Distance"

    # --- Load the distance fields
    heat_arr, poly_ref = load_point_scalar_array(heat_vtk, array_name)
    dijk_arr, _ = load_point_scalar_array(dijkstra_vtk, array_name)
    eucl_arr, _ = load_point_scalar_array(euclid_vtk, array_name)

    # --- Compute difference fields
    diff_heat_euclid = compute_difference_field(eucl_arr, heat_arr)
    diff_dij_euclid = compute_difference_field(eucl_arr, dijk_arr)

    # --- Add results to the reference mesh
    add_difference_to_polydata(poly_ref, diff_heat_euclid, "HeatMinusEuclid")
    add_difference_to_polydata(poly_ref, diff_dij_euclid, "DijMinusEuclid")

    # --- Save the mesh with appended difference fields
    save_polydata(poly_ref, "surface_diff.vtp")

    # --- Plot histograms of difference distributions
    plot_histogram(diff_heat_euclid, "Heat − Euclid Difference Distribution")
    plot_histogram(diff_dij_euclid, "Dijkstra − Euclid Difference Distribution")

    print(
        "✅ Done. Output written to 'surface_diff.vtp'.\n"
        "You can visualize it in ParaView or FreeView, coloring by "
        "'HeatMinusEuclid' or 'DijMinusEuclid'."
    )


if __name__ == "__main__":
    main()
